 http was defines like
there are some basic issue with HTTP:
* Half-duplex protocol
** client initiate the Client send a request to the server, server processes the request, it generates the response and send it back
** there is no way to say : "
* verbose protocol:
** if you want to send a simple hello world message ; the problem is thoses request/response are typically generated by browser and app server, and they want to send a whole bunch of information 
* server push : server has no way to tell to client that "I have some data and I want to push it to you"
HTTP is well but there is some limitations.
So for interactive Web Site, HTTP is  inefficient, wasteful and complex
--------------
a very simple one line definition for WebSocket is : "...."
it's full duplex : that means a client can send a message to server and a server can send a message to client, so both ways, that's full duplex protocol
it's bi-directionnal because client can send to server and server to client independent of each other
the best part is : it is over a single TCP connection 
for every HTTP connection, there is a new TCP connection that is being initiated , yes there is HTTP keep alive and things like that but application can not rely on keep-alive..
HTTP specification by itself define how you can upgrade a protocol.
it says you have a HTTP protocol, you send me a couple of headers as part of the request then I will upgraded to other HTTP protocol or other HTTP protocol
We will use this HTTP upgrade mechanism and upgrade from HTTP to WebSocket.
but once the HTTP connection and underline TCP connection are upgraded to a websocket is like opening a socket over the Internet. We can exchange infinite amount of messages until one of them say "I'm done, I don't want to talk anymore"
When we talk about WebSocket, there are 2 concepts we talk about
- one is a protocol, the protocol by itself means how does under wire format look like.
In WebSocket you have a protocol that is define by RFC 6455, this is about a three years old protocol now, you can search for the document and that will tell you exactly how the protocol looks like. 
it define exactly how the frames look like.
It's a very lean protocol, there is littley a 2 byte of overhead basically says : it's text data or binary data AND then it says its a control frame or a data frame. so it's not a lot of overhead.
then It also defines how the upgrade mechanism is gonna look like.
- when you are building a WebSocket application, you are most likely building a web application, so W3C has define a Javascript API
Handshake request:
-----------------------------
Let's take a look how my handskahe request look like
As you can see the handshake request by itself is nothing but a set of HTTP headers, so very standard set of HTTP headers,
 the ones that you want to look for over here, is

The two key headers that is important here are : upgrade and connection headers => upgrade to websocket and upgrade the connection
those are the 2 essentiels headers, those are defined by the RFC 6654, they must be send in an handshake request

There are also some others headers like

Websocket is a very low level protocol, it doesn't even define a simplest request/response desing pattern, you have to build your own protocol on top of that
so that's my handshake request , bunch of HTTP headers going from the client

Handshake response:
-----------------------------
On the server side, if the server is capable of undertsanding websocket, the very fisrt line should be HTTP 101 and it says "I'm switching the protocol"

Lifecycle:
--------------



JSR 356 API
-------------------



----------------------------------------
Maxime Gr√©au.
